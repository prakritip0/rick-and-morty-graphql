{"ast":null,"code":"var _s = $RefreshSig$();\nimport { gql, useQuery } from \"@apollo/client\";\nconst GET_CHARACTER = gql`\nquery GetCharacter($id:ID!){\n    character(id: $id) {\n    name\n    id\n    image\n    episode {\n      id\n      name\n      episode\n    }\n  }\n}`;\nexport const useCharacter = id => {\n  _s();\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(GET_CHARACTER, {\n    variables: {\n      id\n    }\n  });\n  return {\n    data,\n    error,\n    loading\n  };\n};\n_s(useCharacter, \"eE+cqeCo2lkI//dPlCsO1rICVGU=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["gql","useQuery","GET_CHARACTER","useCharacter","id","_s","data","error","loading","variables"],"sources":["/Users/kriti/Desktop/graphql-rick-and-morty/src/hooks/useCharacter.js"],"sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\n\nconst GET_CHARACTER = gql`\nquery GetCharacter($id:ID!){\n    character(id: $id) {\n    name\n    id\n    image\n    episode {\n      id\n      name\n      episode\n    }\n  }\n}`\n\nexport const useCharacter = (id) => {\n    const { data, error, loading } = useQuery(GET_CHARACTER, {\n        variables: {\n            id\n        }\n    });\n    return { data, error, loading }\n} "],"mappings":";AAAA,SAASA,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE9C,MAAMC,aAAa,GAAGF,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AAEF,OAAO,MAAMG,YAAY,GAAIC,EAAE,IAAK;EAAAC,EAAA;EAChC,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGP,QAAQ,CAACC,aAAa,EAAE;IACrDO,SAAS,EAAE;MACPL;IACJ;EACJ,CAAC,CAAC;EACF,OAAO;IAAEE,IAAI;IAAEC,KAAK;IAAEC;EAAQ,CAAC;AACnC,CAAC;AAAAH,EAAA,CAPYF,YAAY;EAAA,QACYF,QAAQ;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}